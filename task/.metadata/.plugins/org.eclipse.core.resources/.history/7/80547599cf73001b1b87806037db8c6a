package com.backend_challenge.test;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.*;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.BDDMockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.test.context.junit4.SpringRunner;

import backend_challenge.starter.controller.Employee;
import backend_challenge.starter.repositry.Repo;
import backend_challenge.starter.services.EmpService;
import backend_challenge.starter.services.States;



@RunWith(SpringRunner.class)
public class EmployeeTest {

	@MockBean
	private Repo repo;
	
	@Autowired
	private EmpService service;
	
	
	@TestConfiguration
	static class TodoServiceContextConiguration{
		
		@Bean
		EmpService getEmpService(){
			return new EmpService();
		}
	}
	
	@Test
	public void addEmp_shouldReturnTodo(){
		
		Employee employee1 = new Employee(1,"Mohamed",28,States.A);
		BDDMockito.given(repo.addEmployee(BDDMockito.any())).willReturn(employee1);
		
		Employee result = service.addEmployee(employee1);
		System.out.println(result.getName());

		System.out.println(result.getName().equals("Mohamed")?"result is true>>>>>":"result is false>>>");
		//assertThat(result.getTitle()).containsIgnoringCase("todo");

	}
	
	@Test(expected = Exception.class)
	public void whenInvaildId_todoShouldBeNotFound(){
   
		BDDMockito.given(todoRepo.findById(BDDMockito.anyString())).willReturn(Optional.empty());

		 todoSer.getTodoById("1");
	}
	
}
